// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  nickname  String   @unique
  role      Role     @default(USER)

  githubId  String?  @unique

  posts     Post[]
  postReactions PostReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String

  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])

  reactions   PostReaction[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("posts")
}

model PostReaction {
  id          String       @id @default(cuid())
  type        ReactionType

  postId      String
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([postId, userId])
  @@map("post_reactions")
}